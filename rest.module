<?php
/**
 * Implement hook_menu(), just to intercept the request for this query_api.
 */

function rest_menu() {
	$items = array();

	$items['admin/rest'] = array(
		'title' => 'REST API info',
		'type' => MENU_NORMAL_ITEM,

		'page callback' => 'rest_admin',
		'access arguments' => array('dashboard'),
	);


	//////////////////////////////
	////// ENDPOINTS ARRAY ///////
	//////////////////////////////
	/*
		$endpoint = array(
			'route' => 'rest/'.$name,
			'access callback' => TRUE,
			'access arguments' => array(),
			'entity type' => $name,
			'entity bundle' => NULL,
		);
	*/
	$endpoints = array();

	foreach (module_implements('register_rest_endpoint') as $module) {
		// will call all modules implementing hook_hook_name and 
		// push the results onto the $result array
		$add_endpoints = module_invoke($module, 'register_rest_endpoint');
		$endpoints = array_merge($endpoints, $add_endpoints);
	}
	//////////////////////////////
	////// ENDPOINTS ARRAY ///////
	//////////////////////////////

	//////////////////////////////
	//// BUILD ENDPOINTS /////////
	//////////////////////////////
	foreach ($endpoints as $name => $data) {

		$data = _rest_array_values_default($data, array(
			'route' => 'rest/'.$name,
			'access callback' => TRUE,
			'access arguments' => array(),
			'entity type' => $name,
			'entity bundle' => NULL,
		));

		// route to the endpoint itself
		$items[ $data['route'] ] = array(
			'title' => 'REST API endpoint: '. $name,
			'description' => 'This is an endpoint to receive REST requests.',

			'page callback' => 'rest_endpoint',
			'page arguments' => array($name),

			'access callback' => $data['access callback'],
			'access arguments' => $data['access arguments'],
		);

		// route to info page
		$items[ 'admin/rest/info/' . $name ] = array(
			'title' => 'REST API endpoint: '. $name,
			'description' => 'Displays information about the endpoint queried entity.',

			'type' => MENU_LOCAL_TASK,

			'page callback' => 'rest_endpoint_info',
			'page arguments' => array($data['entity type'], $data['entity bundle']),

		//	'access callback' => 
			'access arguments' => array('dashboard'),
		);
	}
	//////////////////////////////
	//// BUILD ENDPOINTS /////////
	//////////////////////////////

	return $items;
}

// admin page
function rest_admin() {
	return 'admin page';
}


// the rest api query processor:
// Creates the hooks
function rest_endpoint($endpoint) {
	// discover the method
	$method = $_SERVER['REQUEST_METHOD'];

	$endpoint = str_replace('/', '_', $endpoint);

	$method_endpoint = $method .'_'. $endpoint;

	////////////////////////////
	/////// RESPONSE ! /////////
	////////////////////////////
	$response = array();


	////////////////////////////
	//// HOOK 1: FETCH DATA ////
	////////////////////////////

	// define %method_%endpoint_fetch_data hook name
	$fetch_hook_name = $method_endpoint .'_fetch_data';

	// @see user_module_invoke()
	foreach (module_implements($fetch_hook_name) as $module) {
		$function = $module .'_'. $fetch_hook_name;
		// will call all modules implementing hook_hook_name
		// and can pass each argument as reference determined
		// by the function declaration
		$function($response);
	}



	////////////////////////////
	//// HOOK 2: ALTER DATA ////
	////////////////////////////

	// define %method_%endpoint_data_alter hook
	$data_alter_hook_name = $method_endpoint .'_response';

	// will call all modules implementing hook_my_data_alter
	drupal_alter($data_alter_hook_name, $response);

	////////////////////////////
	/////// DEBUG //////////////
	////////////////////////////
	if ( !empty($_GET['debug']) || !empty($_POST['debug'])) {
		$response['%method_%endpoint_fetch_data hook'] = $fetch_hook_name;
		$response['%method_%endpoint_data_alter hook'] = $data_alter_hook_name;
	}

	///////////////////
	///// RESPOND /////
	///////////////////
	$response = json_encode($response);

	header('Content-type: application/json');
	echo $response;
	die();
}







function rest_endpoint_info($entity_type, $entity_bundle) {

	$item_data = array(
		'entity_type' => $entity_type,
	//	'entity' =>
		'entity_bundle' => $entity_bundle,
	//	'requirements' =>
	);

	$oop_entity_item = new Oop_EntityItem($item_data);
	
	$item = $oop_entity_item->export();

	$properties = $oop_entity_item->info('properties');
	$property_info = $oop_entity_item->info('property_info');

	$fields = $oop_entity_item->info('fields');
	$field_info = $oop_entity_item->info('field_info');



//	$properties = entity_get_property_info('user');

	$page = '<pre>';
	$page .= '========= PROPERTIES =============<br>';
	$page .= print_r($properties, TRUE);
	$page .= '========= PROPERTIES =============<br>';

	$page .= '========= FIELDS =============<br>';
	$page .= print_r($fields, TRUE);
	$page .= '========= FIELDS =============<br>';
	$page .= '</pre>';

	return $page;
}







///////////////////////////////////
////////// HELPER FUNCTIONS ///////
///////////////////////////////////

/**
 * Defines common helper functions for the rest API and ENDPOINT modules.
 */
function _rest_array_values_default($array, $defaults) {
	foreach ($defaults as $key => $default_value) {
		$array[ $key ] = isset($array[ $key ]) ? $array[ $key ] : $default_value;
	}

	return $array;
}


function _rest_require_all($path) {
	// include all files from /formatters
	foreach (scandir($path) as $filename) {
	    $fpath = $path.'/'.$filename;
	    if (is_file($fpath)) {
	        require $fpath;
	    }
	}
} 
